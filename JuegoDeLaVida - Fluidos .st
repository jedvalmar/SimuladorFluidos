Object subclass: #MundoDeFluidos	instanceVariableNames: 'ventana escenario celdas estadoActualDeCelda estaActivo celdasAgua siguientesCeldas'	classVariableNames: ''	poolDictionaries: ''	category: 'JuegoDeLaVida - Fluidos '!!MundoDeFluidos commentStamp: 'EduardoValenzuela 12/5/2012 11:07' prior: 0!Soy una clase que representa en su interior a un conjunto de fluidos, los cuales se mantienen activos y simulan el comportamiento básico del agua en una forma my primitiva, aislando los componentes básicos y dejando de lado la complejidad matemática que ello implica.Este proyecto se inspiró en autómatas de fluidos utilizados en videojuegoshttp://www.gamasutra.com/view/feature/134736/an_intro_to_cellular_automation.php?print=1http://www.gamasutra.com/view/feature/129972/practical_fluid_dynamics_part_1.phphttp://www.mijagourlay.com/fluidAutomata de fluidos inspirado en el juego de la vida.Las reglas son las siguientes:- Existen 2 tipos de material en el mundo de fluidos: Pared y Agua.- La pared no se mueve en tiempo de ejecucion- El agua se mueve en tiempo de ejecucion:- El movimiento del agua se basa en los siguientes patrones:	- Se coteja lo siguiente:		* si espacio de abajo es vacio, entonces fluido se cambia a ese espacio		* sino de manera aleatoria se decide que direccion tomará, en caso de que la direccion actual sea abajo (valor 0), sino empieza a cotejar hacia la direccion que se tuvo en principio (valor 1 izquierda, valor 2 derecha).		* cotejar subsecuentemente con respecto a la direccion	- Si tiene otra direccion entonces:	     * coteja que el espacio de la direccion siguiente sea vacío, si es vacío se mueve al espacio sino coteja al otro lado y cambia de direccion.		* si el otro lado es vacío entonces se mueve al otro lado y cambia de direccion			-Repetir hasta que se elimina el proceso.Instance Variables	celdas:		<Object>	celdasAgua:		<Object>	escenario:		<Object>	estaActivo:		<Object>	estadoActualDeCelda:		<Object>	siguientesCeldas:		<Object>	ventana:		<Object>celdas	- xxxxxceldasAgua	- xxxxxescenario	- xxxxxestaActivo	- xxxxxestadoActualDeCelda	- xxxxxsiguientesCeldas	- xxxxxventana	- xxxxx!!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/20/2012 23:19'!botonAgua	self estadoActualDeCelda: 1! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/20/2012 23:19'!botonPared	self estadoActualDeCelda: 2.! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 12:20'!celdasAgua  ^celdasAgua ! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 12:20'!celdasAgua: unaCeldaDeAgua	celdasAgua := unaCeldaDeAgua ! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 08:29'!celdasPorLado 	^50! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 13:43'!cotejarVecinosDeNodo: unNodo		| posi posj aux |		posi:= unNodo posi.	posj:= unNodo posj.		"cotejar primero hacia abajo y luego direccion"	posj+1 < self celdasPorLado ifTrue: [		aux:=celdas at:posi at:posj+1.		aux estado = 0 ifTrue: [self intercambiarEstadosDeNodo: aux porNodo: unNodo ];		ifFalse: [			"si no cambia decidiremos a que lado se ira de forma aleatoria"						unNodo direccion = 0 ifTrue: [ 				"Si su direccion inicial es abajo entonces tendra que ser izq o derecha"				(Random new next > 0.5) ifTrue: [unNodo direccion: 1];ifFalse: [unNodo direccion: 2]				]			].				] .		( (unNodo estado = 1) & (unNodo direccion = 1) ) ifTrue: [		"No cambio, cotejar por direccion derecha"				"Primero cotejamos que no se salga de los limites"		posi + 1 < self celdasPorLado ifTrue: [			"Si no se sale entonces existe un posible vecino"			aux:=celdas at:posi+1 at:posj.			aux estado = 0 ifTrue: [self intercambiarEstadosDeNodo: aux porNodo: unNodo ]; ifFalse: [				"Cotejar con izquierda"								"Cotejaremos que se puede ir a izquierda"				posi - 1 > 0 ifTrue: [					aux:=celdas at:posi-1 at:posj.					aux estado = 0 ifTrue: [self intercambiarEstadosDeNodo: aux porNodo: unNodo ]					]								]				"fin izquierda"			].		"fin derecha"		].		( (unNodo estado = 1) & (unNodo direccion = 2) ) ifTrue: [		"No cambio, cotejar por direccion izquierda"		"Primero cotejamos que no se salga de los limites"		posi - 1 > 0 ifTrue: [			"Si no se sale entonces existe un posible vecino"			aux:=celdas at:posi-1 at:posj.			aux estado = 0 ifTrue: [self intercambiarEstadosDeNodo: aux porNodo: unNodo ];ifFalse:  [				"Cotejar con derecha"								"Cotejaremos que se puede ir a derecha"				posi + 1 < self celdasPorLado ifTrue: [					aux:=celdas at:posi+1 at:posj.					aux estado = 0 ifTrue: [self intercambiarEstadosDeNodo: aux porNodo: unNodo ]					]								]				"fin derecha"			].		"fin izquierda"		].! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/21/2012 10:39'!crearBotonesDeAccion SimpleButtonMorph new	label: 'Pared';	target: self;	actionSelector: #botonPared;	position: 900@200;	openInWorld.	SimpleButtonMorph new	label: 'Agua';	target: self;	actionSelector: #botonAgua;	position: 900@300;	openInWorld.	SimpleButtonMorph new	label: 'Iniciar';	target: self;	actionSelector: #iniciarCicloFluidos;	position: 900@400;	openInWorld.! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/14/2012 10:53'!crearVentanaFluidos 	| sampleCell width height |	escenario := BorderedMorph new.	sampleCell := Fluido new.	width:= sampleCell width.	height:= sampleCell height.	escenario bounds: ((5@5) extent: ((width * (self celdasPorLado)) @ (height *(self celdasPorLado) ) + (2 * escenario  borderWidth))).	celdas := Matrix new: (self celdasPorLado) tabulate: [:i :j | self nuevaCeldaEn:i yEn:j].! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/21/2012 10:46'!estaActivo 	 ^estaActivo ! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/21/2012 10:46'!estaActivo: unEstado	estaActivo:= unEstado ! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/21/2012 09:43'!estadoActualDeCelda 	Transcript show:'Regresando estado actual...', estadoActualDeCelda asString ;cr.	^estadoActualDeCelda ! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/21/2012 09:42'!estadoActualDeCelda: unEstado	Transcript show: 'estadoActual = ', unEstado asString ;cr.	estadoActualDeCelda:= unEstado ! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 22:30'!iniciarCicloFluidos	| proceso n |	Transcript show: 'iniciandoCicloFluidos';cr.		self estaActivo: true.		proceso := [n:=0. [true]whileTrue:[			n:=n+1.			self prepararNodosParaSiguienteEstado.			Transcript show: 'preparadosNodos vuelta: ', n asString ;cr.			self pasarASiguienteEstado.			(Delay forMilliseconds: 20)wait.			]]fork.		SimpleButtonMorph new	label: 'Detener';	target: [ proceso terminate. 			SimpleButtonMorph allInstances last delete];	actionSelector: #value;	color: Color red;	position: 900@500;	openCenteredInWorld.	proceso  resume.! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 12:22'!initialize 	| n |	super initialize.	n := self celdasPorLado.	self celdasAgua: OrderedCollection new.	self crearVentanaFluidos.	self crearBotonesDeAccion.	self estadoActualDeCelda: 2.	escenario openInWorld ! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 13:41'!intercambiarEstadosDeNodo: aux porNodo: unNodo	aux estado: 1.	aux onColor: Color blue.	aux turnOn.	siguientesCeldas add:aux.	aux posj > unNodo posj ifTrue: [aux direccion: 0].	aux posi > unNodo posi ifTrue: [aux direccion: 1].	aux posi < unNodo posi ifTrue: [aux direccion: 2].	unNodo estado:0.	unNodo turnOff.	self celdasAgua remove: unNodo .! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/10/2012 02:46'!muestrate 	^ self openInWorld ! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 12:23'!nuevaCeldaEn: i yEn:j	| celda origin |	celda := Fluido new.	origin:=(escenario innerBounds origin). 	escenario addMorph: celda .	celda posi: i .	celda posj: j.	celda delegadoDeCambio: self.	celda delegadoDeTransicion: self celdasAgua.	celda position: ((i - 1) * celda width) @ ((j - 1) * celda height) + origin.	^celda! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 08:27'!pasarASiguienteEstado ! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 13:05'!prepararNodosParaSiguienteEstado 		siguientesCeldas := OrderedCollection new.	celdasAgua do:[:cadaUno|				self cotejarVecinosDeNodo: cadaUno .		].		celdasAgua addAll: siguientesCeldas.		! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/9/2012 08:44'!ventana  ^ventana! !!MundoDeFluidos methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/9/2012 08:44'!ventana: unaVentana	ventana:=unaVentana ! !SimpleSwitchMorph subclass: #Fluido	instanceVariableNames: 'delegadoDeCambio estado posi posj delegadoDeTransicion direccion'	classVariableNames: ''	poolDictionaries: ''	category: 'JuegoDeLaVida - Fluidos '!!Fluido commentStamp: 'EduardoValenzuela 12/5/2012 10:34' prior: 0!Represento la unidad de fluidos, tengo direccion, color activo soy consciente del espacio que ocupo en un eje coordenado.Instance Variables	delegadoDeCambio:		<Object>	delegadoDeTransicion:		<Object>	direccion:		<Object>	estado:		<Object>	posi:		<Object>	posj:		<Object>delegadoDeCambio	- xxxxxdelegadoDeTransicion	- xxxxxdireccion	- xxxxxestado	- xxxxxposi	- xxxxxposj	- xxxxx!!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/20/2012 22:48'!delegadoDeCambio 	^delegadoDeCambio ! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/20/2012 22:47'!delegadoDeCambio: unDelegado	delegadoDeCambio:=unDelegado ! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 12:21'!delegadoDeTransicion  ^delegadoDeTransicion ! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 12:21'!delegadoDeTransicion: unDelegado 	delegadoDeTransicion:= unDelegado ! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 13:13'!direccion	^direccion! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 13:12'!direccion: unadireccion	direccion:= unadireccion ! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 12:24'!doButtonAction		self isOn ifTrue: [		Transcript show: 'Accion de fluido!!';cr.		self delegadoDeCambio estadoActualDeCelda  = 2		ifTrue: [self onColor: Color brown. self estado:2].		self delegadoDeCambio estadoActualDeCelda  = 1		ifTrue: [self onColor: Color blue. self estado: 1. self delegadoDeTransicion add:self].		self turnOn .			]; ifFalse:[		self estado = 1 ifTrue: [self delegadoDeTransicion remove:self].		self estado:0.		self turnOff .		].! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 08:36'!estado 	^estado ! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 08:36'!estado: unEstado	estado:=unEstado ! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 13:55'!initialize	super initialize .	self bounds: ((0@0) corner: (15@15)).	self onColor: Color blue; offColor: Color black. 	self estado: 0.	self direccion: 0.	self turnOff ! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/21/2012 09:37'!mouseMove: evt	(self containsPoint: evt cursorPoint)		ifTrue: [self setSwitchState: (oldColor = offColor)]		ifFalse: [			(self delegadoDeCambio estadoActualDeCelda) = 1 			ifTrue:[self onColor: Color blue]; 			ifFalse:[self onColor: Color brown]. 			self setSwitchState: (oldColor = onColor)].! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 08:41'!mouseUp: evt	(self containsPoint: evt cursorPoint)		ifTrue: [  "toggle and do action"			self setSwitchState: (oldColor = offColor).			self doButtonAction]		ifFalse: [  "restore old appearance"			self setSwitchState: (oldColor =  onColor)].! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 08:51'!posi  ^posi ! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 08:51'!posi: unvalor posi:=unvalor ! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 08:52'!posj  ^posj! !!Fluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/22/2012 08:51'!posj: unvalor 	posj:=unvalor ! !TestCase subclass: #TestFluido	instanceVariableNames: 'unFluido'	classVariableNames: ''	poolDictionaries: ''	category: 'JuegoDeLaVida - Fluidos '!!TestFluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/9/2012 10:04'!setUp	unFluido := Fluido new.	! !!TestFluido methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/9/2012 10:09'!testDeObtenerValor	self assert: unFluido notNil.	! !